import * as zksync from "zksync-web3";
import * as ethers from "ethers";
import { TradeUtil } from "./trade.js";
import { decryptText } from "../../../crypt_module/crypt_text.js";
import * as paths from '../../../paths.js'
import { getInfo, generateTransactionData } from '../../../utils/utils.js';
import { myFormatData } from "../../../formatdata.js";

const zksyncProvider = new zksync.Provider('https://mainnet.era.zksync.io'); // zksync era 节点
const ethereumProvider = new ethers.providers.JsonRpcProvider('https://eth-mainnet.g.alchemy.com/v2/KsQRrJb04s-adwpiSUoSr73lgTiIVmHX'); // 以太坊主网节点

async function check(wallet, address){
    const address = '0xD07180c423F9B8CF84012aA28cC174F3c433EE29'
    const abi = 'function balanceOf(address account) view returns (uint256)'
    const cantract = new zksync.Contract(address, abi, wallet);
    const num = await cantract.balanceOf(address)
    console.log(num)
}
const main = (async()=>{
    const data = await myFormatData(1,20)
    for (const d of data) {
        const privateKey = await decryptText(d['enPrivateKey']);
        if (privateKey === null) {return};
        const wallet = new zksync.Wallet(privateKey, zksyncProvider, ethereumProvider);
        await check(wallet, d['address'])
    }
})

await main();

async function syncSwapToken(wallet) {
    const result = await cantract.getAmountsOut(100000000000000, ['0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91','0x2da10A1e27bF85cEdD8FFb1AbBe97e53391C0295'], [false,false])
    console.log(result)
    process.exit()
    // eth->usdc。没跑通。老提示gas问题。。。数据组装没问题

    // console.log(`--------mint nft操作, 通过 ${projectInfo.name} mint 随机数字域名-------------`)
    const block = await wallet.provider.getBlock()
    const deadline = block.timestamp + 60 * 1000
    const contractAddress = '0x2da10A1e27bF85cEdD8FFb1AbBe97e53391C0295'; // 智能合约地址
    const { encodedParams } = generateTransactionData("swap(address,address,uint256)", ["0x5AEa5775959fBC2557Cc8789bC1bf90A239D9a91",wallet.address,2]);
    const { transactionData:input_data } = generateTransactionData("swap(((address,bytes,address,bytes)[],address,uint256)[],uint256,uint256)", [[[[[
        '0x80115c708E12eDd42E504c1cD52Aea96C547c05c',
        encodedParams,
        '0x0000000000000000000000000000000000000000',
        '0x'
    ]], '0x0000000000000000000000000000000000000000', 100000000000000]], 185680, deadline]);
    console.log(input_data)
    // process.exit()
    // 创建交易对象
    const transaction = {
        to: contractAddress,
        data: input_data,
        gasPrice: ethers.utils.parseUnits('0.25', 'gwei'), //设置 gas 价格，根据当前网络情况调整
        gasLimit: 1541608,
        // 下面数据ethers库自动处理，不必手动组装
        //nonce: await provider.getTransactionCount(wallet.address),
        //chainId:5
    };
    
    // 估算交易所需的 gas 量
    // const gasLimit = await wallet.estimateGas(transaction);
    // transaction.gasLimit = gasLimit;
    try {
        // 使用您的钱包连接的提供程序发送交易
        const receipt = await wallet.sendTransaction(transaction);
        await receipt.wait();
        console.log(`${wallet.address} 交易 成功, hash:${receipt.hash}`);
    } catch(error) {
        console.log(`${wallet.address} 交易 失败, 原因:${error}`)
    }
    
}



'0x2cc4081e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000010fbbd0000000000000000000000000000000000000000000000000000000064abb09f0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000221b262dd80000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000080115c708e12edd42e504c1cd52aea96c547c05c00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000600000000000000000000000005aea5775959fbc2557cc8789bc1bf90a239d9a91000000000000000000000000c5aba5066dad7108c08646733235a498794a714000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000'
'0x2cc4081e0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000002d5500000000000000000000000000000000000000000000000000000000064ac6ade000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a40000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000080115c708e12edd42e504c1cd52aea96c547c05c00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000600000000000000000000000005aea5775959fbc2557cc8789bc1bf90a239d9a91000000000000000000000000c5aba5066dad7108c08646733235a498794a714000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000'